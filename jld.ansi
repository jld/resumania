                            Jed Davis
                         <jld@xlerb.net>
      2000 Walnut St. #215, Boulder, CO 80302; 415‚Äê845‚Äê4647

[1mWork[0m [1mHistory[0m
 [1mMozilla[0m [1mCorporation[0m
  [1mSoftware[0m [1mEngineer[0m, February 2013 ‚Äê present
  * Designed and implemented system‚Äêlevel security sandboxing
    technology for a Web renderer
  * Refactored legacy code for asynchrony and process separation
  * Developed tools to investigate system‚Äêlevel performance on a
    novel mobile OS
 [1mVMware,[0m [1mvSphere[0m [1m(ESXi)[0m [1mKernel[0m [1mCore[0m [1mTeam[0m
  [1mMember[0m [1mof[0m [1mTechnical[0m [1mStaff[0m, May 2010 ‚Äê January 2013
  * Maintained subsystems ranging from memory allocation to
    filesystem implementation to error reporting
  * Improved filesystem and memory management infrastructure
    owned by other groups
  * Debugged and fixed a variety of code, kernel and userlevel,
    as part of rotating bug triage duties
  * Upgraded the kernel build to a newer C compiler, modifying
    the compiler to make this possible
  * Implemented a system for kernel‚Äêspecialized low‚Äêoverhead
    detection of a class of memory usage errors
 [1mPreviously:[0m
  * Researched potential applications of NAND flash memory for
    transparent persistence in garbage‚Äêcollected managed runtime
    environments.
  * Improved crash recovery efficiency of NetBSD‚Äôs software RAID
    driver
  * Gained primary responsibility for a small ISP‚Äôs email system;
    significantly improved its performance
  * Analyzed and corrected defects in the NetBSD kernel,
    including Xen paravirtual drivers

[1mEducation[0m
 [1mNortheastern[0m [1mUniversity,[0m [1mBoston,[0m [1mMA[0m
  * [1mM.S.[0m, Computer Science, 2010
 [1mOberlin[0m [1mCollege,[0m [1mOberlin,[0m [1mOH[0m
  * [1mB.A.[0m, Computer Science (high honors) and Mathematics, 2003
  * Honors project: composable object‚Äêorientation for agent‚Äêbased
    modelling

[1mSkills[0m
 * [1mProgramming[0m [1mLanguages:[0m C, C++, Coq, Erlang, Forth, Haskell,
   JavaScript, m4, OCaml, Perl, Python, Rust, Scheme, sh/sed/AWK;
   TeX/LaTeX, x86 assembly (i386, x86_64)
 * [1mOperating[0m [1mSystems:[0m Linux (Debian), FreeBSD, NetBSD, VMware
   ESXi
 * [1mRevision[0m [1mControl:[0m Git, Mercurial, Subversion, Perforce, CVS

[1mMiscellaneous[0m
 * Judges‚Äô Prize and 3rd place, ICFP Programming Competition,
   2007 (as team of one)
 * Implemented the Rust language‚Äôs optional pointer optimization
 * Lost the 20th International Obfuscated C Code Competition

                 [4mReferences[m [4mavailable[m [4mupon[m [4mrequest[m
